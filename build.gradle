buildscript {
    ext {
        set('springBootVersion', "1.5.7.RELEASE")
    }

    repositories {
        mavenLocal()
        maven { url "http://mirror.didapinche.com/repository/maven-public/" }
        mavenCentral()
    }
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.0.10.RELEASE"
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}


allprojects {
    ext {
        set('springBootVersion', "1.5.7.RELEASE")
        set('springCloudVersion', "Edgware.SR2")
    }

    group 'com.dongyulong'
    version '1.0.0'

    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenLocal()
        maven { url "http://mirror.didapinche.com/repository/maven-public/" }
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
    }

    dependencyManagement {
        imports {
            // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-dependencies
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

}

subprojects {
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
    task packageSources(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    install {
        repositories.mavenInstaller {}
    }
    //上传包
    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: "http://upload-mirror.didapinche.com/repository/maven-releases/") {
                    authentication(userName: "${USER}", password: "${PASSWORD}")
                }
                snapshotRepository(url: "http://upload-mirror.didapinche.com/repository/maven-snapshots/") {
                    authentication(userName: "${USER}", password: "${PASSWORD}")
                }
            }
        }
    }
    uploadArchives.dependsOn(install)
    artifacts.archives packageSources

    dependencies {
        // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter
        compile 'org.springframework.boot:spring-boot-starter'
        // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web
        compile 'org.springframework.boot:spring-boot-starter-web'
        // https://mvnrepository.com/artifact/cn.hutool/hutool-all
        compile 'cn.hutool:hutool-all:5.7.20'
        compile 'com.github.wechatpay-apiv3:wechatpay-apache-httpclient:0.4.2'

        //lombok
        compileOnly('org.projectlombok:lombok:1.18.22')
        annotationProcessor("org.projectlombok:lombok:1.18.22")
        testAnnotationProcessor("org.projectlombok:lombok:1.18.22")
        testCompileOnly("org.projectlombok:lombok:1.18.22")
        compile('org.apache.commons:commons-lang3:3.12.0')
    }

    test {
        useJUnit()
    }

}


